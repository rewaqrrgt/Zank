local HoldClick = true
local Hotkey = 'v' -- Leave blank for always on
local HotkeyToggle = true -- True if you want it to toggle on and off with a click

local Players = game:GetService('Players')
local RunService = game:GetService('RunService')
local TweenService = game:GetService("TweenService") -- TweenService to animate

local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

local Toggle: boolean = (Hotkey ~= '')
local CurrentlyPressed = false

-- Create function to show notifications with slide-in animation, gradient background, and rounded corners
local function showNotification(message)
    local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Parent = PlayerGui

    local Frame = Instance.new("Frame")
    -- Set a smaller notification box size
    Frame.Size = UDim2.new(0, 200, 0, 80)
    -- Position the notification box off-screen initially (bottom-right)
    Frame.Position = UDim2.new(1, 100, 1, 100)
    Frame.BackgroundTransparency = 0.5
    Frame.Parent = ScreenGui

    -- Add rounded corners
    local cornerRadius = UDim.new(0, 20) -- Adjust the number for more or less rounding
    local corner = Instance.new("UICorner")
    corner.CornerRadius = cornerRadius
    corner.Parent = Frame

    -- Create the gradient background
    local gradient = Instance.new("UIGradient")
    gradient.Parent = Frame
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 255)), -- Blue color at the start
        ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0))  -- Black color at the end
    })
    gradient.Rotation = 45  -- Optional: angle of gradient direction

    local TextLabel = Instance.new("TextLabel")
    TextLabel.Size = UDim2.new(1, 0, 1, 0)
    TextLabel.Text = message
    -- Set the font color to purple
    TextLabel.TextColor3 = Color3.fromRGB(128, 0, 128)  -- Purple
    TextLabel.TextSize = 20  -- Set font size to 20
    TextLabel.TextWrapped = true
    TextLabel.Parent = Frame

    -- Create a Tween to slide the notification in
    local slideInTween = TweenService:Create(Frame, TweenInfo.new(0.5, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out), {Position = UDim2.new(1, -220, 1, -120)})
    slideInTween:Play()

    -- Wait for the animation to complete
    slideInTween.Completed:Wait()

    -- Wait for 1 second before removing the notification
    wait(1)

    -- Create a Tween to slide the notification out
    local slideOutTween = TweenService:Create(Frame, TweenInfo.new(0.5, Enum.EasingStyle.Bounce, Enum.EasingDirection.In), {Position = UDim2.new(1, 100, 1, 100)})
    slideOutTween:Play()

    -- Wait for the slide-out animation to finish before removing the ScreenGui
    slideOutTween.Completed:Wait()
    ScreenGui:Destroy()
end

-- Event to handle key press
Mouse.KeyDown:Connect(function(key)
    if HotkeyToggle == true and key == Hotkey then
        Toggle = not Toggle
        if Toggle then
            showNotification("on")  -- Show "on" notification when toggled on
        else
            showNotification("off")  -- Show "off" notification when toggled off
        end
    elseif key == Hotkey then
        Toggle = true
        showNotification("on")  -- Show "on" notification
    end
end)

-- Event to handle key release
Mouse.KeyUp:Connect(function(key)
    if HotkeyToggle ~= true and key == Hotkey then
        Toggle = false
        showNotification("off")  -- Show "off" notification when toggled off
    end
end)

-- Event to handle mouse actions when Toggle is active
RunService.RenderStepped:Connect(function()
    if Toggle then
        if Mouse.Target then
            if Mouse.Target.Parent:FindFirstChild('Humanoid') then
                if HoldClick then
                    if not CurrentlyPressed then
                        CurrentlyPressed = true
                        mouse1press()
                    end
                else
                    mouse1click()
                end
            else
                if HoldClick then
                    CurrentlyPressed = false
                    mouse1release()
                end
            end
        end
    end
end)

-- Create function to show "Zank" text with RGB change at bottom left
local function createZankNotification()
    local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Parent = PlayerGui

    local Frame = Instance.new("Frame")
    Frame.Size = UDim2.new(0, 200, 0, 60) -- Set size of the frame
    Frame.Position = UDim2.new(0, 20, 1, -80) -- Position the frame at bottom-left
    Frame.BackgroundTransparency = 0.5
    Frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- Black background
    Frame.Parent = ScreenGui

    -- Create the text label
    local TextLabel = Instance.new("TextLabel")
    TextLabel.Size = UDim2.new(1, 0, 1, 0)
    TextLabel.Position = UDim2.new(0, 0, 0, 0)
    TextLabel.Text = "Zank"
    TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255) -- Start with white color
    TextLabel.TextSize = 30
    TextLabel.TextWrapped = true
    TextLabel.TextStrokeTransparency = 0.8
    TextLabel.Parent = Frame

    -- Create an RGB color changing effect using TweenService
    local function changeColor()
        local tweenInfo = TweenInfo.new(3, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1, true) -- Looping the tween

        local colorTween = TweenService:Create(TextLabel, tweenInfo, {
            TextColor3 = Color3.fromHSV(math.random(), 1, 1) -- Random RGB change (using HSV)
        })

        colorTween:Play()
    end

    -- Call the function to change colors
    changeColor()
end

-- Call the createZankNotification function to start the RGB changing text
createZankNotification()

